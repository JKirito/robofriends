{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","email","username","name","className","src","alt","Cardlist","robots","cardcomponent","map","users","i","key","id","Searchbox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCJSC,EAZF,SAACC,GAAS,IACdC,EAAwBD,EAAxBC,MAAMC,EAAkBF,EAAlBE,SAASC,EAASH,EAATG,KACvB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA2BH,EAA3B,YAAgDI,IAAI,UAC5D,6BACC,4BAAMH,GACN,2BAAKF,MCKMM,EAZE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGE,GAAIN,EAAOI,GAAGE,GAAIX,KAAMK,EAAOI,GAAGT,KAAMD,SAAUM,EAAOI,GAAGV,SAAUD,MAAOO,EAAOI,GAAGX,WAG7G,OACC,6BACEQ,ICDWM,EAPG,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACC,yBAAKb,UAAU,OACd,2BAAOA,UAAU,mCAAmCc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCK5FI,EARA,SAACrB,GACf,OACC,yBAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEzB,EAAM0B,WCgDIC,G,kBA7Cd,aAAe,IAAD,8BACb,+CAiBDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAlBxC,EAAKC,MAAQ,CACZ1B,OAAQ,GACRuB,YAAa,IAJD,E,iFAQM,IAAD,OAElBI,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAzB,GACP,EAAKmB,SAAS,CAACtB,OAAQG,S,+BAWhB,IAAD,OACD4B,EAAiBC,KAAKN,MAAM1B,OAAOiC,QAAO,SAAAjC,GAC/C,OAAOA,EAAOL,KAAKuC,cAAcC,SAAS,EAAKT,MAAMH,gBAEtD,OAA+B,IAA5BS,KAAKN,MAAM1B,OAAOoC,OACb,wBAAIxC,UAAU,MAAd,cAKP,yBAAKA,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAS+B,U,GAvCNM,c,MCDlBC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SN2HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.51d2459a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props)=>{\r\n\tconst { email,username,name } = props;\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${ username }?200X200`} alt='Robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{ name }</h2>\r\n\t\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst Cardlist = ({robots})=>{\r\n\r\n\tconst cardcomponent = robots.map((users,i)=>{\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} username={robots[i].username} email={robots[i].email} />\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardcomponent}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchField,searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '400px'}}>\r\n\t\t\t{ props.children }\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React,{ Component } from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\n// import { robots } from './Robots';\r\nimport Scroll from './Scroll';\r\nimport './App.css'\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\t// console.log(\"Done\");\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n\t\t\treturn response.json();\r\n\t\t}).then(users=>{\r\n\t\t\tthis.setState({robots: users});\r\n\t\t});\r\n\t\t// this.setState({robots: robots});\r\n\t}\r\n\r\n\tonSearchChange = (event)=>{\r\n\t\t// this.state.searchfield = event.target.value;\r\n\t\tthis.setState({searchfield:event.target.value});\r\n\t};\r\n\r\n\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield);\r\n\t\t})\r\n\t\tif(this.state.robots.length ===0){\r\n\t\t\treturn <h1 className='tc'>Loading...</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<Searchbox searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist robots={ filteredRobots } />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport App from './App'\nimport './index.css'\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}